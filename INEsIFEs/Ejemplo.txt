import cv2

MODEL_MEAN_VALUES = (78.4263377603, 87.7689143744, 114.895847746)
age_list = ['(0, 2)', '(4, 6)', '(8, 12)', '(15, 20)', '(25, 32)', '(38, 43)', '(48, 53)', '(60, 100)']
gender_list = ['Male', 'Female']
face_cascade = cv2.CascadeClassifier('/home/erick/PycharmProjects/Base/haarcascades/'
                                     'haarcascade_frontalface_default.xml')
eye_cascade = cv2.CascadeClassifier('/home/erick/PycharmProjects/Base/haarcascades/haarcascade_eye.xml')
nose_cascade = cv2.CascadeClassifier('/home/erick/PycharmProjects/Base/haarcascades/haarcascade_nose.xml')
mouth_cascade = cv2.CascadeClassifier('/home/erick/PycharmProjects/Base/haarcascades/haarcascade_mouth.xml')


def initialize_caffe_model():
    age_net = cv2.dnn.readNetFromCaffe(
        "age_gender_models/deploy_age.prototxt",
        "age_gender_models/age_net.caffemodel")
    gender_net = cv2.dnn.readNetFromCaffe(
        "age_gender_models/deploy_gender.prototxt",
        "age_gender_models/gender_net.caffemodel")
    return age_net, gender_net


def getfaces(age_net, gender_net, pic):
    font = cv2.FONT_HERSHEY_SIMPLEX
    gray = cv2.cvtColor(pic, cv2.COLOR_BGR2GRAY)
    faces = face_cascade.detectMultiScale(gray, 1.3, 5)
    gender = None
    age = None
    roi_color = []
    for (x, y, w, h) in faces:
        roi_gray = gray[y:y + h, x:x + w]
        roi_color = pic[y:y + h, x:x + w]
        eyes = eye_cascade.detectMultiScale(roi_gray)
        nose = nose_cascade.detectMultiScale(roi_gray)
        mouth = mouth_cascade.detectMultiScale(roi_gray)

        if len(eyes) != 0:
            eyeys = []
            eyehs = []
            if len(eyes) <= 2:
                face_img = pic[y:y + h, x:x + w].copy()

                for (ex, ey, ew, eh) in eyes:
                    #cv2.rectangle(roi_color, (ex, ey), (ex + ew, ey + eh), (0, 255, 0), 2)
                    eyeys.append(ey)
                    eyehs.append(ey + eh)

            else:
                face_img = pic[y:y + h, x:x + w].copy()
                eyedata = []
                datasum = 0
                for (ex, ey, ew, eh) in eyes:
                    eyedata.append([ew * eh, (ex, ey), (ex + ew, ey + eh)])
                    datasum += ew * eh
                eyedata = sorted(eyedata, reverse=True)
                ave = datasum/len(eyedata)
                eye1 = []
                eye2 = []
                for el in range(len(eyedata)):
                    checker = ((eyedata[el][0] + eyedata[el + 1][0]) / 2) - ave
                    eye1 = eyedata[el]
                    eye2 = eyedata[el + 1]
                    if 0 < checker < 1000:
                        break

                #cv2.rectangle(roi_color, eye1[1], eye1[2], (0, 255, 0), 2)
                #cv2.rectangle(roi_color, eye2[1], eye2[2], (0, 255, 0), 2)

                eyeys = [eye1[1][1], eye2[1][1]]
                eyehs = [eye1[2][1], eye2[2][1]]

            nosey = 0
            noseh = 0
            for (nx, ny, nw, nh) in nose:
                if min(eyeys) < ny and max(eyehs) < ny + nh:
                    nosey = ny
                    noseh = ny + nh
                    #cv2.rectangle(roi_color, (nx, ny), (nx + nw, ny + nh), (0, 0, 255), 2)

            for (mx, my, mw, mh) in mouth:
                # centerxm = int((mw + (mx * 2)) / 2)
                centerym = int((mh + (my * 2)) / 2)
                if min(eyeys) < my and max(eyehs) < my and not (nosey < centerym < noseh):
                    #cv2.rectangle(roi_color, (mx, my), (mx + mw, my + mh), (255, 0, 0), 2)
                    None

            #cv2.rectangle(pic, (x, y), (x + w, y + h), (255, 255, 0), 2)
            blob = cv2.dnn.blobFromImage(face_img, 1, (227, 227), MODEL_MEAN_VALUES, swapRB=False)

            # Predict gender
            gender_net.setInput(blob)
            gender_preds = gender_net.forward()
            gender = gender_list[gender_preds[0].argmax()]
            # Predict age
            age_net.setInput(blob)
            age_preds = age_net.forward()
            age = age_list[age_preds[0].argmax()]
            #overlay_text = "%s, %s" % (gender, age)
            #cv2.putText(pic, overlay_text, (x, y), font, 2, (255, 255, 255), 2, cv2.LINE_AA)

    return roi_color, gender, age 
